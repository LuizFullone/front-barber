import { HttpClient, HttpHeaders } from '@angular/common/http';

import {map, tap} from 'rxjs/operators';
import { Injectable } from '@angular/core';
import {User} from '../model/model.user';

import {AppComponent} from '../app.component';
@Injectable()
export class AuthService {

  constructor(public http: HttpClient) { }

  public logIn(user: User) {
    // creating base64 encoded String from user name and password
    let base64Credential: string = btoa( user.username+ ':' + user.password);
    let body = JSON.stringify(user);
<<<<<<< HEAD
    return this.http.post(AppComponent.API_URL + '/account/login' , body,  { headers: {
      'Accept': 'application/json',
      'Authorization': 'Basic ' + base64Credential
    } } );
=======
    return this.http.post(AppComponent.API_URL+"/account/login" , body,  options)
      .map((response: Response) => {
      // login successful if there's a jwt token in the response
      let fetchedUser = response.json().principal;// the returned user object is a principal object
      if (fetchedUser) {
        // store user details  in local storage to keep user logged in between page refreshes
        sessionStorage.setItem('currentUser', JSON.stringify(fetchedUser));
        sessionStorage.setItem('base64Credential', base64Credential);
        sessionStorage.setItem('withCredentials', 'true');
        sessionStorage.setItem('compId', fetchedUser.compId);
        sessionStorage.setItem('compName', fetchedUser.compName);
        sessionStorage.setItem('userId', fetchedUser.userId);
        sessionStorage.setItem('username', fetchedUser.username);
        sessionStorage.setItem('userProfile', fetchedUser.profile);
        sessionStorage.setItem('firstAccess', fetchedUser.changePassword);
      }
    });
>>>>>>> task651
  }

  logOut() {
    // remove user from local storage to log user out
    return this.http.post(AppComponent.API_URL+'/logout',{}).pipe(
      map((response: Response) => {
      }));

  }

  sendPasswordResetEmail(email: string) {
    return this.http.post(AppComponent.API_URL + '/account/sendPasswordReset/' + email, email).pipe(
      map((response: Response) => {
        console.log('sent Password Reset Email!')
      }));
  }

  public resetPassword(user: User, token: String) {
<<<<<<< HEAD
    console.log(AppComponent.API_URL + '/account/reset/' + token);
    return this.http.post(AppComponent.API_URL + '/account/reset/' + token, user).pipe(
      map((response: Response) => {
=======
    return this.http.post(AppComponent.API_URL + '/account/reset/' + token, user)
      .map((response: Response) => {
>>>>>>> task651
        console.log('password reseted!')
      }));
  }
}